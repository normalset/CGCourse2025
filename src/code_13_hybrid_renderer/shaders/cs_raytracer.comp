

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;

uniform mat4 uProjInv;
uniform mat4 uViewInv;
uniform mat4 uModelInv;
uniform vec3 uLDir;



mat3 create_axes(in vec3 x_axis, in vec3 norm){
    mat3 axes;
    axes[0] = normalize(x_axis);
    vec3 y_axis = normalize(cross(norm,axes[0]));
    vec3 z_axis = normalize(cross(axes[0],y_axis));

    axes[1] = y_axis;
    axes[2] = z_axis;
    axes = transpose(axes);
    return axes;
}

struct Ray {
    vec3 orig;
    vec3 dir;
};

struct Sphere {
    vec3 center;
    float radius;
    PhongMaterial material; 
};

struct Quad{
    mat3 axes;
    vec3 pos;
    vec2 size;
    PhongMaterial material; 
};

Sphere s0;
Quad q0;


struct HitInfo {
    float t;
    vec3 p;
    vec3 n;
    PhongMaterial m;
    bool hit;
};

// Initialize a default HitInfo struct
HitInfo defaultHitInfo() {
    HitInfo h;
    h.t = 1e30; // A large number to represent no hit
    h.hit = false;
    return h;
}

bool hit_sphere(Ray r, Sphere s, out HitInfo nfo) {
    float A = dot(r.dir, r.dir);
    float B = dot(r.dir, r.orig - s.center) * 2.0;
    float C = dot(r.orig - s.center, r.orig - s.center) - s.radius * s.radius;

    float delta = B * B - 4.0 * A * C;

    if (delta < 0.0)
        return false;  

    float t1 = (-B - sqrt(delta)) / (2.0 * A);
    float t2 = (-B + sqrt(delta)) / (2.0 * A);

    float t_min = min(t1, t2);

    if (t_min < 0.0)
        t_min = max(t1, t2);

    vec3 p = r.orig + r.dir * t_min;
    vec3 n = normalize(p - s.center);
    
    nfo.t = t_min;
    nfo.p = p;
    nfo.n = n;
    nfo.m = s.material;
    nfo.hit = (t_min > 0.0);

    return true;
}

bool hit_quad( Ray r,  Quad q, out HitInfo nfo){
    
    nfo.hit = false;

    vec3 pos_frame  = (q.axes * r.orig - q.axes*q.pos);
    vec3 dir_frame = q.axes * r.dir; 
    
    if( abs(dir_frame.z) < 0.001)
        return false;
    
    float t = - pos_frame.z / dir_frame.z;
    
    if(t < 0.0) return false;

    vec3 intPoint = vec3(pos_frame.x+t*dir_frame.x,pos_frame.y+t*dir_frame.y,0.0);
    if(intPoint.x < -q.size.x/2.0) return false;
    if(intPoint.y < -q.size.y/2.0) return false;
    if(intPoint.x >  q.size.x/2.0) return false;
    if(intPoint.y >  q.size.y/2.0) return false;
       
    mat3 axesT = transpose(q.axes);
    nfo.p = r.orig+t*r.dir;
    nfo.n = axesT[2];
    nfo.m = q.material;
    nfo.t = t;
    nfo.hit = true;
   
    return true;
}

HitInfo closest(in HitInfo nfo1,in HitInfo nfo2){
    if(nfo1.t < nfo2.t) return nfo1; else return nfo2;
}

HitInfo hit_scene(  Ray r,   float m, float M ){
 HitInfo nfoT;
 nfoT.hit = false;
 nfoT.t = M;
 r.orig += m*r.dir;

// test all the elments of the scene
 HitInfo cnfo;
 if ( hit_sphere( r, s0,cnfo)  ) nfoT = closest(cnfo,nfoT); 
 if ( hit_quad( r, q0,cnfo)  ) nfoT = closest(cnfo,nfoT); 
 
 nfoT.hit =  (nfoT.t < M); 
 return nfoT;
}


void main(void) 
{ 
	PhongMaterial m = PhongMaterial( uAmbientColor,uDiffuseColor,uSpecularColor,uEmissiveColor,uLightColor,uShininess);

   ivec2 pix = ivec2(gl_GlobalInvocationID.xy);

   imageStore(imgOutput, pix, vec4(0.0,0.0,0.0,1.0) );

   /* create a sphere */
   s0.center = vec3(0,3,0);
   s0.radius = 1.0;
   s0.material = m;

   /* create a quad */
   q0 =  Quad(create_axes(vec3(1.0,0.0,0.0),vec3(0.0,1.0,0.0)),vec3(0.0,0.0,0.0),vec2(4,4),m);

   
   Ray r;

   vec2 rpos = vec2(-1.0) +  2.0 * vec2(pix)/vec2(512.0);
   vec4 p0 = uProjInv * vec4(rpos,-1.0,1.0);
   p0 /= p0.w;
   vec4 p1 = uProjInv * vec4(rpos, 1.0,1.0);
   p1 /= p1.w;

   r.orig = (uModelInv*uViewInv * p0).xyz; 
   r.dir  = normalize((uModelInv* uViewInv * (p1-p0)).xyz);
   vec3 l_dir = normalize((uModelInv* vec4(uLDir,1.0)).xyz);

   HitInfo hi = hit_scene(r,0.0,100);
   
   if(hi.hit){
        vec3 c = phong(l_dir,-r.dir,hi.n,hi.m);     
         imageStore(imgOutput, pix, vec4(c,1.0) );
        }
} 